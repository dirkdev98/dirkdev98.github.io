// Generated by @compas/code-gen
/* eslint-disable no-unused-vars */

const objectKeys1278404364 = new Set([
  "filePath",
  "contentPath",
  "metadata",
  "htmlContent",
]);
const objectKeys675969221 = new Set([
  "type",
  "title",
  "date",
  "description",
  "order",
  "tags",
]);
/**
 * @param {*} value
 * @returns {boolean}
 */
export function isNil(value) {
  return value === undefined || value === null;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {{ key: string, info: any }[]} errors
 * @param {string} parentType
 * @returns {string|undefined}
 */
export function anonymousValidator186795873(
  value,
  propertyPath,
  errors = [],
  parentType = "string",
) {
  if (isNil(value)) {
    errors.push({
      key: `validator.${parentType}.undefined`,
      info: { propertyPath },
    });
    return undefined;
  }
  if (typeof value !== "string") {
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath },
    });
    return undefined;
  }
  if (value.length < 1) {
    const min = 1;
    errors.push({
      key: `validator.${parentType}.min`,
      info: { propertyPath, min },
    });
    return undefined;
  }
  return value;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {{ key: string, info: any }[]} errors
 * @param {string} parentType
 * @returns {string|undefined}
 */
export function anonymousValidator1135331723(
  value,
  propertyPath,
  errors = [],
  parentType = "string",
) {
  if (isNil(value)) {
    errors.push({
      key: `validator.${parentType}.undefined`,
      info: { propertyPath },
    });
    return undefined;
  }
  if (typeof value !== "string") {
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath },
    });
    return undefined;
  }
  if (value.length < 24) {
    const min = 24;
    errors.push({
      key: `validator.${parentType}.min`,
      info: { propertyPath, min },
    });
    return undefined;
  }
  if (value.length > 29) {
    const max = 29;
    errors.push({
      key: `validator.${parentType}.max`,
      info: { propertyPath, max },
    });
    return undefined;
  }
  if (
    !/^(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))$/gi.test(
      value,
    )
  ) {
    errors.push({
      key: `validator.${parentType}.pattern`,
      info: { propertyPath },
    });
    return undefined;
  }
  return value;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {{ key: string, info: any }[]} errors
 * @param {string} parentType
 * @returns {undefined|Date|undefined}
 */
export function anonymousValidator1988053796(
  value,
  propertyPath,
  errors = [],
  parentType = "date",
) {
  if (isNil(value)) {
    return value;
  }
  if (typeof value === "string") {
    value = anonymousValidator1135331723(value, propertyPath, errors, "date");
  }
  try {
    const date = new Date(value);
    if (!isNaN(date.getTime())) {
      return date;
    }
  } catch {
    errors.push({
      key: `validator.${parentType}.invalid`,
      info: { propertyPath },
    });
    return undefined;
  }
  errors.push({
    key: `validator.${parentType}.invalid`,
    info: { propertyPath },
  });
  return undefined;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {{ key: string, info: any }[]} errors
 * @param {string} parentType
 * @returns {number|undefined}
 */
export function anonymousValidator840286224(
  value,
  propertyPath,
  errors = [],
  parentType = "number",
) {
  if (isNil(value)) {
    errors.push({
      key: `validator.${parentType}.undefined`,
      info: { propertyPath },
    });
    return undefined;
  }
  if (typeof value !== "number") {
    value = Number(value);
  }
  if (typeof value !== "number" || isNaN(value) || !isFinite(value)) {
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath },
    });
    return undefined;
  }
  if (!Number.isInteger(value)) {
    errors.push({
      key: `validator.${parentType}.integer`,
      info: { propertyPath },
    });
    return undefined;
  }
  return value;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {{ key: string, info: any }[]} errors
 * @param {string} parentType
 * @returns {(string)[]|undefined}
 */
export function anonymousValidator1898391521(
  value,
  propertyPath,
  errors = [],
  parentType = "array",
) {
  if (isNil(value)) {
    errors.push({
      key: `validator.${parentType}.undefined`,
      info: { propertyPath },
    });
    return undefined;
  }
  if (!Array.isArray(value)) {
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath },
    });
    return undefined;
  }
  const result = Array.from({ length: value.length });
  for (let i = 0; i < value.length; ++i) {
    result[i] = anonymousValidator186795873(
      value[i],
      `${propertyPath}[${i}]`,
      errors,
    );
  }
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {{ key: string, info: any }[]} errors
 * @param {string} parentType
 * @returns {undefined|{"type": "blog"|"page", "title": string, "date"?: Date, "description": string, "order": number, "tags": (string)[], }|undefined}
 */
export function anonymousValidator675969221(
  value,
  propertyPath,
  errors = [],
  parentType = "object",
) {
  if (isNil(value)) {
    return value;
  }
  if (typeof value !== "object") {
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath },
    });
    return undefined;
  }
  const result = Object.create(null);
  for (const key of Object.keys(value)) {
    if (!objectKeys675969221.has(key)) {
      errors.push({
        key: `validator.${parentType}.strict`,
        info: { propertyPath, extraKey: key },
      });
      return undefined;
    }
  }
  if (value["type"] !== "blog" && value["type"] !== "page") {
    const parentType = "string";
    const oneOf = ["blog", "page"];
    errors.push({
      key: `validator.${parentType}.oneOf`,
      info: { propertyPath: `${propertyPath}.type`, oneOf },
    });
  }
  result["type"] = value["type"] ?? undefined;
  result["title"] = anonymousValidator186795873(
    value["title"],
    `${propertyPath}.title`,
    errors,
  );
  result["date"] = anonymousValidator1988053796(
    value["date"],
    `${propertyPath}.date`,
    errors,
  );
  result["description"] = anonymousValidator186795873(
    value["description"],
    `${propertyPath}.description`,
    errors,
  );
  result["order"] = anonymousValidator840286224(
    value["order"],
    `${propertyPath}.order`,
    errors,
  );
  result["tags"] = anonymousValidator1898391521(
    value["tags"],
    `${propertyPath}.tags`,
    errors,
  );
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {{ key: string, info: any }[]} errors
 * @param {string} parentType
 * @returns {undefined|string|undefined}
 */
export function anonymousValidator1443576836(
  value,
  propertyPath,
  errors = [],
  parentType = "string",
) {
  if (isNil(value)) {
    return value;
  }
  if (typeof value !== "string") {
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath },
    });
    return undefined;
  }
  if (value.length === 0) {
    return undefined;
  }
  if (value.length < 1) {
    const min = 1;
    errors.push({
      key: `validator.${parentType}.min`,
      info: { propertyPath, min },
    });
    return undefined;
  }
  return value;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {{ key: string, info: any }[]} errors
 * @param {string} parentType
 * @returns {{"filePath": string, "contentPath": string, "metadata"?: {"type": "blog"|"page", "title": string, "date"?: Date, "description": string, "order": number, "tags": (string)[], }, "htmlContent"?: string, }|undefined}
 */
export function anonymousValidator1278404364(
  value,
  propertyPath,
  errors = [],
  parentType = "object",
) {
  if (isNil(value)) {
    errors.push({
      key: `validator.${parentType}.undefined`,
      info: { propertyPath },
    });
    return undefined;
  }
  if (typeof value !== "object") {
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath },
    });
    return undefined;
  }
  const result = Object.create(null);
  for (const key of Object.keys(value)) {
    if (!objectKeys1278404364.has(key)) {
      errors.push({
        key: `validator.${parentType}.strict`,
        info: { propertyPath, extraKey: key },
      });
      return undefined;
    }
  }
  result["filePath"] = anonymousValidator186795873(
    value["filePath"],
    `${propertyPath}.filePath`,
    errors,
  );
  result["contentPath"] = anonymousValidator186795873(
    value["contentPath"],
    `${propertyPath}.contentPath`,
    errors,
  );
  result["metadata"] = anonymousValidator675969221(
    value["metadata"],
    `${propertyPath}.metadata`,
    errors,
  );
  result["htmlContent"] = anonymousValidator1443576836(
    value["htmlContent"],
    `${propertyPath}.htmlContent`,
    errors,
  );
  return result;
}
